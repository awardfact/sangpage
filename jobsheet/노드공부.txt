실행 방식

이벤트 루프 : 이벤트 발생 시 호출할 콜백 함수 관리, 호출된 콜백 함수 실행 순서 결정
백그라운드 : setTimeout같은 타이머나 이벤트 리스너가 대기하는 곳
태스트 큐 : 이벤트 발생 후 백그라운드에서 태스트 큐로 타이머나 이벤트 리스터 콜백 함수 보냄

setTimeout이 실행되면 타이머와 함께 백그라운드로 보내지고 시간이 지나면 태스크 큐로 보내진다
이벤트 루프는 호출 스택이 비어 있으면 태스크 큐에서 하나씩 가져와 호출 스택에 넣는다
(setTimeout 시간이 지나도 태스크 큐에 작업이 있을 수가 있어서 setTimeout의 시간이 정확하지 않을 수있다)

블로킹 : 이전 작업이 끝나야만 다음 작업 실행(자바스크립트)
논블로킹 : 이전작업이 끝날때까지 대기하지 않고 다음 작업 수행(I/O)

블로킹만 있으면 작업 시간이 느려질 수 있어서 논 블로킹 방식으로 코딩하는 습관을 들여야 함
ex) setTimeout(function(){} , 0)  (0밀리초지만 브라우저는 5ms, 노드는 1ms의 지연이 있다)
오래걸리는 작업을 논블로킹으로 바꿔서 간단한 작업먼저 끝날 수 있게 하는것이 좋음


프로세스와 스레드

프로세스 : 운영체제에서 할당하는 작업 단위 프로세스 간에는 자원공유 X
스레드 : 프로세스 내에서 실행되는 흐름 단위 프로세스에서 스레드를 여러 개 생성해 동시에 작업을 처리
할수있음 스레드는 부모 프로세스의 자원을 공유 

노드는 싱글 스레드는 아니지만 제어할 수 있는 스레드는 하나이다

스래드풀과 워커 스래드의 경우는 멀티 스래드를 사용한다

스레드풀 : 노드가 특정 동작할떄 스스로 멀티 스레드 사용ex)암호화 입출력 압축
워커스레드 : 노드에서 멀티 스레드를 사용할 수 있게 해준다 

노드 특징
노드는 웹 서버가 내장되어있다 , 개발 언어로 자바스크립트를 사용한다 , 싱글스레드를 사용
CPU연산을 많이 요구하는 작업에는 약하지만 개수는 많지만 작은 데이터를 주고받을떄 유리
JSON과 호환이 잘됨 , 서버 규모가 커졌을 떄 서버 관리가 어렵다 , 스레드가 하나라 그 스레드가
멈추지 않도록 관리해줘야 한다 


노드에서 this
최상위 스코프에 존재하는 this는 module, exports를 가리키지만 함수 안에서의 this는 global객체를 가리킨다

require모듈이나 export모듈은 상단 하단에 위치하지 않아도된다


노드에서 os모듈을 사용하면 운영체제의 정보를 가져올 수 있다.
ex) const os = require('os');  os.type();

__filename : 현재 파일의 이름을 나타낸다
__dirname :현재 폴더의 경로를 나타낸다 
path.extname(string) - 파일의 확장자를 나타낸다 
path.relative(string) - 경로를 두 개 넣으면 첫 번쨰 에서 두 번째 경로로 가는방법을 알려준다 

url모듈은 url에 관한 여러 기능을 제공한다

searchParams : 키와 값을을 모두 가져옴

ex) const {URL} = require('url');
const myURL = new URL('https://github.com/awardfact/makeProgram/tree/master/node?page=3&limit=10&category=nodejs&category=javascript');
console.log('searchParams : ' , myURL.searchParams);
console.log('searchParams.getAll() : ', myURL.searchParams.getAll('category'));
console.log('searchParams.get() :  ' , myURL.searchParams.get('limit'));
console.log('searchParams.has() : ', myURL.searchParams.has('page'));


querystring - WHATWG 방식의 url 대신 기존 노드의 url을 사용할떄 search부분을 사용하기 쉽게 객체로 만드는 모듈

querystring.parse(쿼리) : url의 query부분을 자바스크립트 객채로 분해
querystring.stringify(객체) : 분해된 query객체를 다시 조립한다 

crypto모듈 - 암호화를 도와주는 모듈이다 

해쉬만드는 코드 
ex)const crypto = require('crypto');
console.log('base64 :' , crypto.createHash('sha512').update('password').digest('base64') );
 
createHash(알고리즘) - 해쉬에 사용할 알고리즘을 넣는다
update(문자열) -  변환할 문자열을 넣는다
digest(인코딩) - 인코딩할 알고리즘을 넣는다 base64, hex, latin1이 주로 사용되는데 base가 가장 짧아 많이 이용된다 

현재 주로 비밀번호 알고리즘으로 pbkdf2 , bcrypt, scrypt 사용한다 pbkdf2는 노드에서 지원한다  
사용예시) crypto.pbkdf2('비밀번호' , salt , 10000 , 64, 'sha512' , (err,key) =>{
        console.log('password' ,  key.toString('base64'));
    });

pbkdf2 의 매개변수로 비밀번호, salt, 반복횟수 , 출력 바이트, 해시 알고리즘을 넣는다 

양방향 암호화는 cipher를 이용한다 
사용예시)const algorithm = 'aes-256-cbc';
const key = 'abcdefghijklmnopqrstuvwxyz123456';
const iv = '1234567890123456';
const cipher = crypto.createCipheriv(algorithm,key,iv);
let result = cipher.update('암호화할 문장' , 'utf-8' , 'base64');
result += cipher.final('base64');
console.log('암호화 : ' , result);  
const decipher = crypto.createDecipheriv(algorithm,key,iv);
let result2 = decipher.update(result, 'base64' , 'utf-8');
result2 += decipher.final('utf-8');
console.log('복호화 :' , result2);

util 모듈은 각종 편의 기능들을 모아놓은 모듈이다

노드에서 worker_threads 모듈을 사용하면 멀티 쓰레드를 사용할 수 있다 

child_process모듈을 사용하면 노드에서 다른 프로그램을 실행하거나 명령어를 수행할 수 있다 

fs모듈은 파일 시스템에 접근하는 모듈이다(파일 생성 삭제 읽거나 쓸수 있음)
실무에서 사용할 떄는 fs모듈을 프로미스 형식으로 바꿔주는 방법을 사용한다

동기 메서드들은 이름 뒤에 sync가 붙어있는 경우가 대부분이다

노드는 파일을 읽을 떄 메모리에 파일 크기만큼 공간을 마련해두고 파일 데이터를 메모리에 저장한 뒤
사용자가 조작할 수 있도록 하고 이때 메모리에 저장한 데이터가 버퍼이다.

Buffer.from(문자열)  : 문자열을 버퍼로 바꿀 수 있습니다length속성은 버퍼의 크기를 나타낸다(바이트단위)
Buffer.toString(버퍼) : 버퍼를 다시 문자열로 바꿀 수 있다 
Buffer.concat(배열) : 배열안에 들어있는 버퍼를 하나로 합침ㄹ
Buffer.alloc(바이트) : 빈 버퍼를 생성, 바이트를 인수로 넣으면 해당 크기의 버퍼 생성 

버퍼의 크기가 크면 편리하지만 버퍼에 큰 내용을 쓴 후에 다음 동작을 할 수 있어 문제가 생긴다
그래서 버퍼의 크기를 작게 여러 번 나눠 방식이 생겼는데 이것이 스트림이다
스트림 예시) 
const readStream = fs.createReadStream('./readme3.txt' , {highWaterMark : 16}); 스트림으로 읽기
readStream.on('data' , (chunk)=>{
    data.push(chunk);
    console.log('data : ' , chunk, chunk.length);
});

fs.mkdir 폴더를 만드는 메서드 이미 폴더가 있으면 오류남
fs.readdir(경로, 콜백) : 폴더 안의 내용물을 확인할 수 있다
fs.unlink(경로, 콜백) : 파일을 지울 수 있는 메서드
fs.rmdir(경로, 콜백) : 폴더를 지울 수 있는 메서드 파일이 있으면 에러 
fs.copyFile(복사할파일,, 복사될파일)  :파일을 복사하는 메서드 

스레드풀의 개수를 바꾸는 방법
윈도우 : SET UV_THREADPOOL_SIZE = 1
맥, 리눅스 : UV_THREADPOOL_SIZE=1

events모듈을 사용하면 이벤트를 직접 만들 수 있다 
on(이벤트명 , 콜백) :이벤트 이름과 발생시 콜백 연결한다 addListener과 기능이 같다
emit(이벤트명)  : 이벤트를 호출하는 메서드 
once(이벤트명, 콜백) : 한 번만 실행되는 이벤트 
removeAllListeners(이벤트명) :이벤트에 연결된 모든 이벤트 리스너 제거
removeListener(이벤트명, f리스너) : 이벤트에 연결된 리스너를 하나씩 제거
off(이벤트명, 콜백) : removeListener와 기능 동일 
listenerCOunt(이벤트명)  : 리스너가 몇개 연결되어있는지 확인 

예외처리
멀티스래드에서는 스레드 하나가 멈추면 그 일을 다른 스레드가 대신하는데 노드는 스레드가 하나여서
스렏으가 멈추면 전체가 멈추게 된다 그래서 노드에서는 예외처리가 더욱 중요하다 

예기치 못한 에러는 uncaughtException이벤트로 처리할 수 있지만 해당 이벤트는 최후의 방법이고
이후의 동작을 보증하지 않기 떄문에 로그 기록용으로만 사용하는게 좋다 

자주 발생하는 에러 

node : command not found - 환경변수가 제대로 설정되어있지 않을떄 뜨는 오류
ReferenceError : 모듈 is not defined - 모듈을 require하지 않으면 뜨는 오류
Error : Cannot find module 모듈명 - 모듈을 rquire했지만 설치하지 않은 경우 
Error : Can't set headers after they are sent : 요청에 대한 응답을 보낼 떄 응답을 두번 이상 보낸경우 뜨는 에러
FATAL ERROR : CALL_AND_RETRY_LAST Alloation faild Javascript heap out of memory - 코드를 실행할 떄 메모리가 부족하면 뜨는 오류
UnhandlePromiseRejectionWarning : Unhandled promise rejection - 프로미스 사용 시 catch메서드를 붙이지 않은 경우 생기는 오류 
EADDRINUSE 포트 번호 : 해당 포트 번호에 이미 다른 프로세스가 연결되어있는경우 발생
EACCES 또는 EPERM - 노드가 작업을 수행하는 데 권한이 충분하지 않은 경우 발생
EJSONPARSE - package.json 등의 JSON파일에 문법 오류가 있을 때 발생
ECONNREFUSED - 요청을 보냈으나 연결이 성립되지 않은 경우 발생
ETARGERT - packge.json에 기록한 패키지 버전이 존재하지 않을 떄 발생
ETIMEOUT - 요청을 보냈는데 응답이 일정 시간 내에 오지 않은 경우 발생
ENOENT : no such file or directory - 지정한 폴더나 파일이 존재하지 않는 경우 

aws에서 노드 실행하기

sudo apt-get update 
sudo apt-get install nodejs
sudo apt-get install npm
sudo apt-get install git

이것들 먼저 설치해준다 
 npm start- 서버 실행
$ sudo nohup npm start & - 백그라운드로 서버 실행 

서버 실행을 위한 기본코드 
const http = require('http');
http.createServer((req,res)=>{
    res.writeHead(200, {'Content-type' : 'text/html; charset=utf-8' });
    res.write('<div>hello world</div>');
    res.end('<div>hello Server</div>');
}).listen(8080 , ()=>{
    console.log('8080포트');
});
이 코드를 포트만 바꿔 여러개 넣어서 여러 서버를 동시에 실행할 수도 있다 

rest는 서버 자원을 정의하고 자원에 대한 주소르르 지정하는 방법을 가리킨다 
rest api 메서드
get - 서버 자원을 가져오고자 할때 사용 데이터를 서버로 보낼때는 쿼리스트링을 사용한다
post - 서버에 자원을 새로 등록하고자 할 떄 사용 
put - 서버의 자원을 요청에 들어있는 자원으로 치환할 떄 사용
patch - 서버 자원의 일부만 수정하고자 할떄 사용
delete 서버의 자원을 삭제하고자 할 때 사용 
options - 요청을 하기 전에 통신 옵션을 설명하기 위해 사용 

http 통신을 사용하면 클라이언트가 누구든 상관없이 같은 방식으로 서버와 소통할 수 있다

쿠키를 가져오는거는 
const cookie = req.headers.cookie; 와 같이 가져오고

쿠키를 설정할떄는
res.writeHead(200, {'set-Cookie' : 'mycookie=test'});와 같이 한다 
}

쿠키 설정할떄 옵션은 세미콜론으로 구분하고 다음과 같은 옵션이 있다
쿠키명=쿠키값 
Expires=날짜   - 날짜가 지나면 쿠키가 제거된다 기본값은 클라이언트 종료시
max-age=초 - 날짜대신 해당 초가 지나면 제거된다 expire보다 우선
Domain=도메인명 - 쿠키가 전송될 도메인을 특정할 수 있다 기본값은 현재 도메인
Path=URL - 쿠키가 전송될 URL
Secure : Https인경우에만 쿠키 전송
httpOnly - 자바스크립트에서 쿠키 접근 불가 

cluster모듈은 싱글 프로세스로 동작하는 노드가 CPU코어를 모두 사용할 수 있게 해주는 모듈이다 

npm - 노드 패키지 매니저로 125만개 이상의 패키지가 등록되어있다 

패키지는 저마다 고유한 버전이 있고 같은 패키지라도 버전별로 기능이 다를 수 있어서 프로젝트를
설치할떄 패키지도 동일한 버전을 설치하지 않으면 문제가 생길 수 있다 이때 패키지 버전을 관리하는
파일이 package.json이다 
따라서 노드 프로젝트를 시작하기 전에는 무조건 package.json 부터 만들고 시작해야한다 

package.json을 만들려면 콘솔창에서 npm init을 치면된다 그러면 여러가지 입력하는게 나온다
package name - 패키지 이름
version - 패키지 버전
entry point - 자바스크립트 실행 파일 진입점
test command - 코드를 테스트할 떄 입력할 명령어
git repository - 코드를 저장해둔 깃 저장소 주소
keywords - npm공식 홈페이지에서 패키지를 쉽게 찾을수 있도록 하는 키워드
license - 해당 패키지의 라이센스 
이것들을 다 입력하면 package.json이 완성된다 

패키지 설치는 npm install 패키지 이름을 치면 설치가 된다
ex) npm install express

패키지를 설치하면 package.json에 기록된다 여러개를 설치할 때는 npm install 패키지1 패키지2 패키지3이런식으로 하면된다

nodemon패키지는 소스코드가 바뀔 때마다 자동으로 노드를 재실행해주는 패키지이다 
npm install --save-dev nodemon

npm에는 전역 설치도 있는데 현재 폴더의 node_module에 설치하는 것이 아니라 npm이 설치되어있는
폴더에 설치한다 이 폴더의 경로는 보통 환경변수에 등록되어있어 전역 설치한 패키지는 콘솔의 명령어로
사용할 수 있다 보통 명령어로 사용하기 위해 전역 설치한다 
ex)npm install --global rimraf
하지만 전역설치하면 package.json에 기록되지 않기 때문에 package에 기록하기 위해서는
ex) npm install --save-dev rimraf
npx rimraf node_modules
와 같이 설치 후 앞에 npx  명령어를 붙여서 실행하면 된다 

node_module 폴더가 삭제되어도 package.json에 기록된 패키지들은 
npm install 명령어만 치면 다시 설치가 된다 

노드 패키지의 버전은 세자리로 이루어져있다 버전이 3자리인 이유는 SemVer방식의 넘버링을 따르기 때문이다

첫 번째 자리는 major 버전이다 0이면 초기 개발중이고 1부터는 정식 버전을 의미한다 
major버전은 하위 호환이 안 될 정도로 패키지 내용이 수정되었을 때 올린다 

두 번쨰 자리는 minor 버전이다 minor버전은 하위 호환이 되는 기능 업데이트를 할 떄 올린다 
버전을 1.5.0에서 1.6.0으로 올렸다면 1.5.0사용자가 1.6.0으로 올렸을때 아무 문제가 없어야 한다

세 번쨰 자리는 patch버전이다 새로운 기능이 추가되었다기보다는 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 patch버전을 올린다

새 버전을 배포한 후에는 그 버전의 내용을 수정하면 안되고 수정 사항이 생기면 major,minor,patch중 하나를
의미에 맞게 올려서 새로운 버전으로 배포해야한다 

package.json에는 semver식 세 자리 버전 외에도 버전앞에 ^나~,>,<같은 문자가 붙어있는데
이 문자는 버전에는 포함되지 않지만 설치하거나 업데이트 할 떄 어떤 버전을 설치해야 하는지 알린다 
^는 minor버전까지만 설치하거나 업데이트한다는것을 나타낸다 
npm i express@^1.1.1이라면 1.1.1이상부터 2.0.0미만 버전까지 설치된다
~기호는 patch버전까지만 설치하거나 업데이트한다 
npm i express@~1.1.1이면 1.1.1이상부터 1.2.0미만 버전ㄴ까지 설치된다 
minor버전까지는 하위 호환이 보장되기 때문에 ^를 많이 사용한다 
> < = 는 부등호를 표시한다 
npm i express@>1.1.1이면 1.1.1이상인 버전이 설치된다 
@latest는 안정된 최신 버전의 패키지를 설치한다   @next는 가장 최근 배포판을 설치한다 
ex) npm i express@latest 


기타 npm명령어

npm outdated - 업데이트 할 수 있는 패키지가 있는지 확인
npm update 패키지명 - 패키지를 업데이트한다 패키지명을 적지 않으면 가능한 모든 패키지를 업데이트한다 
npm uninstall 패키지명 - 해당 패키지를 제거하는 명령어이다 node_moulde과 package.json에서 사라진다 
npm search 검색어 - npm의 패키지를 검색할 수 있다 
npm info 패키지명 - 패키지의 세부 정보를 파악할때 사용 
npm adduser - npm로그인을 위한 명령어 npm공식 사잍에서 가입한 계정으로 로그인하면된다 
npm version 버전 - 명령어는 package.json의 버전을 올린다 
npm deprecate 패키지명 버전 메시지 - 해당 패키지를 설치할 떄 경고 메시지를 띄우게 한다 자신 패키지에만 적용가능
npm publish - 자신이 만든 패키지를 배포할 떄 사용 
npm unpublish - 배포한 패키지를 제거할 때 사용 
npm ci - package.json 대신 package-lock.json에 기반해 패키지를 설치한다 

npm info 패키지명을 입력했을떄 정보가 나오면 누군가 사용하고 있는 패키지명이고 에러가 뜨면
사용 가능한 패키지명이다 

package.json srcipt부분에 "start" : "nodemon app"을 하면 app.js를 nodemon으로 실행한다는 뜻인데
서버 코드에 수정이 생길떄마다 nodemon모듈로 서버를 재시작한다 
nodemon은 개발용으로만 사용하는것이 좋다 

익스프레스

익스프레스 모듈을 실행해 app변수에 할당하는 코드 
const expess = require('express');
const app = express();

app.set('port', 포트 ) 로 서버가 실행될 포트를 설정할 수 있다 
app.set('키,값)을 사용해서 데이터를 저장할 수 있다 app.get(키)로 가져올 수 있다
app.get(주소,라우터)는 주소에 대한 get요청이 올 때 어떤 동작을 할지 적는 부분이다 
app.listen(포트)로 서버를 실행한다 
ex)const expess = require('express');
const app = express();
app.set('port' , process.env.PORT || 3000);
app.get('/' , (req,res) =>{
    res.send('익스프레스 시작');
});
app.listen(app.get('port') , ()=>{
    console.log(app.get('port'), '번 포트 ');
});


npm start를 통해 서버를 실행시킬 수 있다 

res.sendFile(경로)를 통해 html로 응답할 수도 있다
ex)    res.sendFile(path.join(__dirname, '/index.html'));

미들웨어는 익스프레스에서 아주 중요한 요소이다 미들웨어는 요청과 응답을 조작하여 
기능을 추가하기도 하고 나쁜 요청을 걸러내기도 한다 
미들웨어는 app.use와 함꼐 사용된다

app.use에 매개변수가 req,res,next 등 함수를 넣는데 미들웨어는 위에서 아래로 순서대로
실행되면서 요청과 응답 사이에 특별한 기능을 추가할 수 있고 next를 통해
다음 미들웨어로 넘어갈 수 있다 next를 실행하지 않으면 다음 미들웨어가 실행되지 않는다
주소를 첫 번쨰 인수로 넣어주지 않으면 모든 요청에서 실행되고 주소를 넣으면
해당하는 요청에서만 실행된다 
ex) app.use(미들웨어) -모든 요청에서 실행
app.use('/abc', 미들웨어 ) abc로 시작하는요청에서만 실행
app.post('/abc', 미들웨어 ) - abc로 시작하는 POST요청에서 미들웨어 실행 

에러처리 미들웨어는 매개변수가 err,req,res,next로 네개가 들어간다 
에러처리 미들웨어는 특별한 경우가 아니면 가장 아래에 위치하게 한다 

morgan을 사용하면 요청과 응답을 한 눈에 확인할 수 있다
ex)const morgan = require('morgan'); 	 app.use(morgan('dev'));

static 미들웨어는 정적인 파일들을 제공하는 라우터 역할을 한다 
ex) app.use('/' , express.static(path.join(__dirname, 'public'));

body-parser 미들웨어는 요청의 본문에 있는 데이터를 해석해서 req, body 객체로 만들어준다 보통
폼 데이터나 ajax요청의 데이터를 처리할 떄 사용한다 단 멀티파트(이미지,동영상,파일)데이터는 처리 불가
ex) app.use(express.json());  app.use(expres.urlencode({ extended : false}));
이렇게 하면 json형식, url-encode형식모두 req.body에 {name : test , test : test} 와 같이 들어간다

cookie-parser미들웨어는 요청에 동봉된 쿠키를 해석해 req.cookies객체로 만든다 
ex) app.use(cookieParser(비밀키));
비밀키를 인수로 넣으면 서명된 쿠키가 있는 경우 검증을 할 수 있다 

쿠키 생성은
ex) res.cookie('name', 'test' , {expires : new Date(Date.new() + 9000), httpOnly : true, secure : true,});
쿠키 삭제는
ex) res.clearCookie('name','test', {httpOnly : true , secure : true} );
쿠키 삭제는 키 값 외에도 옵션이 일치해야 지울 수 있다 옵션에 signed를 사용하면 쿠키 뒤에 서명이 붙는다

express-session 미들웨어는 세션 관리용 미들웨어다 사용은
ex) app.use(session({ resave : false, saveUnitialized : false, secret : process.env.COOKIE_SECRET, cookie : { httpOnly : true , secure : false}, name : 'session-cookie',}));
다음과 같이 한다 resave는 요청올떄 세션수정사항이 생기지 않아도 다시 저장할지 설정하는것이고
saveUnittialize는 세션에 저장할 내역이 없어도 처음부터 세션을 생성할지 설정한다 
express-session은 세션 관리 시 클라이언트에 쿠키를 보낸다 안전하게 보낼려면 쿠키에 서명을 추가하면된다

미들웨어는 req,res,next 매개변수로 가지는 함수로 app.use , app.get, app.post등으로 장착한다
특정 주소 요청에만 실행하게 하려면 첫 번째 인수로 주소를 넣으면 된다 
app.use( morgan('dev'), express.static('/',path.join(__dirname,'public'),express.json());와 같이
여러개의 미들웨어를 동시에 장착할 수도 있다 
next를 호출하지 않는 미들웨어는 res.send나 res.sendFile등으로 응답을 보낸다

next에 route문자열을 넣으면 다음 라우터 미들웨어로 이동하고 그 외 인수를 넣으면 에러처리 미들웨어로 간다
req.data = 'data'와 같이 사용하면  미들웨어 간에 데이터를 전달할 수도 있다 
미들웨어안에 미들웨어를 넣는 방식을 하면 조건문에 따라 다른 미들웨어로 처리할 수도 있다 

multer미들웨어는 이미지 동영상 등 여러 파일을 업로드할떄 사용하는 미들웨어이다 
ex) const multer = require('multer');
const upload = multer({storage : multer.diskStorage({ destination(req,file,done){ done(null, 'uploads/');},
filename(req,file,done){ constext = path.extname(file.originalname); done(null, path.basename(file.originalname,ext) + Date.noew() + ext);
},}), limit : {fileSize : 5*1024*1024 },});
upload에는 다양한 미들웨어가 생기는데 하나만 업로드하는 경우엔 single미들웨어를 사용한다 
ex) app.post('/upload', upload.single('image'), (req,res)=>{
	console.log(req.file,req.body); res.send('ok');

input태그에 multiple을 넣은 경우에는 array미들웨어를 사용하고 여러 input태그로 업로드한경우엔 fields미들웨어를 사용한다 


라우터 객체를 사용해서 app.js코드를 간략하게 만들 수 있다
ex) index.js 파일을 만들고 이 파일에
const express = require('express');  const router = express.Router();  router.get('/' ,(req,res)=>{
res.send('rooute');}); module.exports = router;
이런식으로 코딩을 하고 app.js에
const indexRouter = require('./index.js'); app.use('/index', indexRouter); 를 넣어준다 이렇게 하면
/index 페이지로 갔을때 index.js코드가 실행된다 

라우터에 패턴을 넣을 수 있는데
ex) router.get('/user/:id', function(req,res){}); 
이런식으로 :id패턴을 넣으면 /user/1 , /user/123 요청 모두 이 라우터가 처리하게 된다 이런패턴을 넣을려면
맨 아래에 넣어야한다 

주소에 쿼리스트링이 있으면 req.query객체를 통해 얻을 수 있다 


익스프레스의 req,res객체는 http모듈의 req,res객체를 확장한 것이다 자주 쓰이는 속성과 메서드는 다음과 같다
req.app - req객체를 통해 app객체에 접근할 수 있다 req.app.get('port')와 같이 사용
req.body - body-parser미들웨어가 만드는 요청의 본문을 해석
req.cookies - cookie-parser미들웨어가 만드는 요청의 쿠키를 해석한 개체
req.ip - 요청 ip주소가 담겨있다 
req.params - 라우트 매개변수에 대한 정보가 담긴 객체
req.query - 쿼리스트링에 대한 정보가 담긴 객체
req.signedCookies - 서명된 쿠키들을 req.cookie대신 여기에 담긴다
req.get(헤더이름) - 헤더의 값을 가져올떄사용하는 매서드
res.app - res객체를 통해app 접근
res.cookie(키, 값, 옵션) - 쿠키를 설정하는 메서드
res.clearCookie(키 값, 옵션) - 쿠키를 제거하는 메서드
res.end() - 데이터 없이 응답을 보낸다
res.json(JSON) - JSON형식의 응답을 보낸다
res.redirect(주소) - 리다이렉트할 주소와 함께 응답을 보낸다
res.render(뷰, 데이터) - 렌더링해서 응답할 때 사용
res.send(데이터) - 데이터와 함꼐 응답을 보낸다
res.sendFile(경로) - 경로에 위치한 파일을 응답
res.set(헤더, 값) - 응답의 헤더를 설정 
res.status(코드) - 응답시 http상태 코드 지정 

req나 res는 다음과 같이 사용을 할 수도 있다
res.status(201).cookie('test,'test).redirect('/admin');


템플릿을 사용하면 html을 더 쉽게 작성할 수 있다 
템플릿 엔진중에 대표적인것은 퍼그와 넉적스가 있다

퍼그 설치 - npm i pug  
익스프레스에 연결 -  app.set('views', path.join(__dirname, 'views')); app.set('view engine', pug);
views는 템플릿 파일이 위치한 폴더를 지정한다 res.render('index')면 views/index.pug를 렌더링

퍼그는 < > 화살괄호와 닫는 태그가 없고 탭 또는 스페이스로만 부모 자식관계를 설정한다 
ex)
doctype html
html
    head
        title = title
        link(rel='stylesheet' , href='/stylesheets/style.css')

속성과 클래스 아이디 등은 다음과 같이 표헌한다 div는 생략이 가능하다 
#login-button   -  <div id=loginbutton>
.post-image -  <div class=post-image
span#highlight - <span id=highlight
텍스트는 태그 또는 속성 뒤에 한 칸 띄고 입력한다
p hello world


넌적스 설치- npm i nunjucks
익스프레스 연결 - const nunjucks = require('nunjucks'); app.set('view engine', 'html'); nunjucks.configure('views', {express:app, waatch,true});


에러 처리 미들웨어는 error라는 템플릿파일을 렌더링한다 렌더링 시 res.locals.message와
res.locals.error에 넣어준 값을 함께 렌더링한다 
res.locals.error = process.env.NODE_ENV !== 'production' ? err :{};을 에러처리 미들웨어에 넣으면 배포환경이
아닌경우에만 스택 트레이스를 출력한다 


시퀄라이즈를 사용하면 노드에서 mysql작업을 쉽게 할 수 있다 
설치는 npm i sequelize sequelize-cli mysql2 를 쳐서 한다 
sequelize-cli는 시퀄라이즈 명령을 실행하기 위한 패키지이고 mysql2는 시퀄라이즈와 mysql을 이어주는 드라이브다
설치 후npx sequlize init 명령어를 호출하면 된다 

models/index.js는 그대로 쓰면 오류가 생길수 있어서 상황에 맞게 소스를 수정해준다 
mysql과 연동할 때는 config 폴더 안의 config.json정보가 사용되기 떄문에 해당 파일을 사용할 데이터베이스에
맞게 넣어주면 된다 

디비 연결이 안되면 npx sequelize db:create를 해준다 
mysql에서 정의한 테이블을 시퀄라이즈에서도 정의해야 하는데 mysql테이블은 시퀄라이즈
모델과 대응된다 시퀄라이즈는 모델과 mysql테이블을 연결해주는 역할을 한다4
models/폴더에 테이블이름.js 파일을 만들고 모델을 만들어준다 

모델은 sequelize.model을 확장한 클래스로 선언하고 
static init메서드와 static associate메서드로 나뉜다 
init메서드는 테이블에 대한 설정을 하고 associate는 다른 모델과의 관계를 적는다
init메서드의 super.init의 첫 번째 인수가 테이블 칼럼에 대한 설명이고 두 번쨰 인수가 테이블 자체에 대한 설명이다

자료형은 VARCHAR - STRING , INT - INTERGER , TINYINT - BOOLEAAN , DATETIME - DATE로 적는다
allowNull - NOT NULL , unique - UNIQUE 로 연결하고 defaultValue는 기본값을 의미한다
Sequelize.NOW로 현재 시간을 기본값으로 사용할 수 있다 
super.init 매서드의 두 번쨰 인수는 테이블 옵션이다
sequelize - static init 매서드의 매개변수와 연결되는 옵션으로 db.sequelize객체를 넣는다 나중에 index.js에서 연결
timestamps - true로 되어있으면 시퀄라이즈는 createdAt과 updatedAt컬럼을 추가하고 생성, 수정 시간이 자동으로 입력된다
underscored - 시퀄라이즈는 테이블명과 컬럼명을 캐멀 형식(createdAt)으로 만드는데 스네이크 형식(created_at)으로 바꾸는 옵션이다
modelName - 모델 이름을 설정한다 이름은 노드에서 사용
tableName - 실제 데이터베이스의 테이블 이름을 넣는다 보통 
paranoid - ture로 설정하면 deletedAt컬럼이 생기고 로우를 삭제할떄 완전히 삭제되지 않고 deletedAt에 지운 시각이 기록된다
charset, collate - 각각 utf8 , utf8_general_ci로 설정해야 한글이 입력된다 이포티콘까지 쓰려면 utf8mb4 , utf8mb4_general_ci를 입력한다 
ex)
const Sequelize = require('sequelize');
module.exports = class Comment extends Sequelize.Model {
  static init(sequelize) {
    return super.init({
      comment: {
        type: Sequelize.STRING(100),
        allowNull: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: true,
        defaultValue: Sequelize.NOW,
      },
    }, {
      sequelize,
      timestamps: false,
      modelName: 'Comment',
      tableName: 'comments',
      paranoid: false,
      charset: 'utf8mb4',
      collate: 'utf8mb4_general_ci',
    });
  }
  static associate(db) {
    db.Comment.belongsTo(db.User, { foreignKey: 'commenter', targetKey: 'id' });
  }
};

model/index.js에 마든 모델을 담으면 db객체를 require하여 User와 Comment모델에 접근할 수 있다
모델.init이 실행되어야 테이블이 모델로 연결된다 모델.associate메서드를 실행하면 다른 테이블과의 관계가 연결된다

mysql에서는 JOIN이라는 기능으로 여러 테이블 관계를 파악해 결과를 도출하는데 시퀄라이즈는 JOIN기능을
알아서 구현한다 대신 테이블간의 어떤 관계가 있는지 시퀄라이즈에 알려야 한다 

1:N

시퀄라이즈에서는 1:N관계를 hasMany라는 메서드로 표현한다 users테이블의 로우 하나를 불러올 떄 
comments테이블의 로우들도 같이 불러올 수 있다 반대로 belongsTop메서드를 사용하면
comments테이블의 로우를 불러올 떄 연결된 users테이블의 로우를 가져온다 

이러한 관계는 models/모델.js에 작성한다 
ex)  static associate(db) {  db.User.hasMany(db.Comment, { foreignKey: 'commenter', sourceKey: 'id' }); }
  static associate(db) {    db.User.hasMany(db.Comment, { foreignKey: 'commenter', sourceKey: 'id' }); }
다른 모델의 정보가 들어가는 테이블에 belongsTo를 사용한다  hasMany메서드에서는 sourceKey속성을 사용하고
belongsTo 메서드에서는 targetKey속성을 사용한다 foreignKey를 따로 지정하지 않는다면
이름이 모델명 + 기본키인 컬럼이 모델에 생성된다 


1:1

1:1관계에서는 hasMany메서드 대신 hasOne메서드를 사용한다
1:1관계라고 해도 belongsTo와 hasOne이 반대가 되면 안된다 

N:M

시퀄라이즈에서는 N:M 관계를 표현하기 위한 belongsToMany메서드가 있다  사용은 다음과 같이 한다
ex) db.Post.belongsToMany(db.HashTag, { through : 'PostHashtag' });
db.Hashtag.belongsToMany(db.Post , { through : 'PostHashtag '} );

시퀄라이이즈로 CURD작업을 하려면 먼저 시퀄라이즈 쿼리를 알아야 한다 sql문을 자바스크립트로
생성하는 것이라 시퀄라이즈만의 방식이 있다 
쿼리는 프로미스로 반환하므로 then을 붙여 결과값을 받을 수 있다 async/await문법과 같이 사용할 수도 있다
로우 생성은 다음과 같이 한다

c
const {User} = require('../models'); User.create({ name : 'zero' , age : 24 , married : false , comment : '자기소개'});
주의할 점은 넣을 떄 mysql의 자료형이 아니라 시퀄라이즈 모델에 정의한 자료형대로 넣어야 한다

r
모든 데이터를 조회하는건 다음과 같이 한다
User.findAll({});
하나만 가져오는 건 다음과 같이 한다
User.findOne({});
attribute 옵션을 사용하면 원하는 것만 가져올 수 있다 
User.findAll({attributes : ['name' , 'married' ]});  - SELECT name , married From nodejs.users;
where은 다음과 같이 사용한다 
const{Op} = require('sequelize');  User.findAll({attributes: ['name', age'], where : { married : true, age : {[Op.gt] : 30} } }  )
= SELECT name, age from nodejs.users where married = 1 AND age > 30;
mysql에서는 undefined라는 자료형을 지원하지 않아서 where옵션에는 undefined대신 null을 사용한다
op.gt같은 경우는 시퀄라이즈는 자바스크립트 객체를 사용해서 쿼리를 생성해야 하므로 특수한 연산자를 사용한다
Sequlize객체 내부의 Op객체를 불러와 사용한다 자주 쓰이는 연산자는 다음과 같다
Op.gt - 초과     Op.gte -이상    Op.lte - 이하  Op.ne - 같지않음    Op.or - 또는 
 Op.in  - 배열 요소 중 하나        Op.notIn - 배열 요소와 모두 다름

정렬은 order옵션으로 가능하다 
ex) User.findAll({  order : [['age' , 'DESC' ]]  });
로우 개수를 설정하는 limit은 limit옵션으로 한다 
ex) User.findAll ({ limit : 1 });
offset도 offset속성으로 구현한다
ex) User.findAll ({  offst : 1 };


u

로우를 수정할 떄는 다음과 같이 한다 
ex) User.update({  comment : '바꿀내용 } , { where : { id : 2 } ,  });  = UPDATE users set comment = 바꿀내용 where id = 2;
첫 번쨰 인수는 수정할 내용을 넣고 두 번쨰 인수는 어떤 로우를 수정할지 where옵션을 넣는다


d

로우를 삭제할 떄는 다음과 같이 한다 
ex) User.destroy({  where : {id : 2}  });



관계 쿼리를 사용하려면 프로미스의 결과로 모델을 반환하면 된다 어떤 모델과 관계가 있는지 include배열에 넣어주면 된다
ex) const user = await User.findOne({   include [ { model : Comment ,} ] })
다음과 같이 댓글에 접근할 수도 있다
const user = await User.findOne({}); const comments = await user.getComment();
관계를 설정했다면 
get모델() - 조회   set모델() - 수정    add모델 - 하나 생성  add모델s  - 여러개 생성
remove모델 - 삭제 메서드를 지원한다 
모델 이름을 바꾸고 싶다면 관계 설정 시 as옵션을 사용하면 된다 
ex) static associate(db) {  db.User.hasMany(db.Comment, { foreignKey: 'commenter', sourceKey: 'id' ,  as : 'Answers' }); }


include나 관계 쿼리 메서드에도 where이나 attributes같은 옵션을 사용할 수 있다 
여러개를 추가할 때는 배열로 추가할 수 있다
ex) const user = await User.findOne({});  const comment1 = await Comment.create(); 
const comment2 = await Comment.create(); await user.addComment([comment1,comment2]);
수정이나 삭제도 이와같이 한다 


만약 시퀄라이즈를 사용하기 싫거나 어떻게 해야할지 모르겠다면 직접 SQL문을 통해 쿼리할 수도 있다
ex) const [result, metadata ] = await sequlize.qurey('SELECT * from comments'); 
웬만하면 시퀄라이즈 쿼리를 사용하는것이 좋다 


몽고디비
몽고디비는 자바스크립트를 문법으로 사용하는 디비이다 하지만 몽고디비는 RDBMD가 아니라 NoSQL이므로
잘 알고 사용해야ㅑ 한다 

mysql은 sql을 사용하는 대표적인 데이터베이스인 반면에 sql을 사용하지 않는  NOSQL이 있다
몽고디비는NoSQL의 대표주자이다 '

SQL의 특징
규칙에 맞는 데이터 입력
테이블 간 JOIN지원
안정성, 일괄성
용어(테이블 로우 컬럼)

NoSQL특징
자유로운 데이터 입력
컬렉션 간 JOIN미지원
확장성 가용성
용어(컬렉션 , 다큐먼트, 필드)

NoSQL에는 고정된 테이블이 없다 테이블에 상응하는 컬렉션이라는 개념이 있지만 컬럼을 따로 정의하지 않는다
mysql은 user테이블을 만들 떄 name, age 등 컬럼과 자료형 등을 정의하지만 몽고디비는
그냥 users컬렉션을 만들고 끝이다 해당 컬렉션에는 어떠한 데이터도 들어갈 수 있다 
몽고디비는 JOIN기능이 없는데 JOIN을 흉내낼 수는 있지만 하나의 쿼리로 여러 테이블을 합치는 
작업이 항상 가능하지 않다 동시에 쿼리를 수행하는 경우쿼리가 섞여 예상치 못한 결과를 낼 수도 있다
하지만 확장성과 가용성이 좋아 이러한 디비를 사용한다 
애플리케이션을 만들 때 꼭 한 가지 디비로만 데이터베이스를 사용할 필요는 없다 
많은 기업이 SQL과 NOSQL을 동시에 사용한다 서로 알맞은 곳에 사용하면 된다 


뒤는 나중에 공부




배포


서비스를 배포하기 전에 개발용으로 설정한 파일을 배포용으로 설정한다
ex) if(process.env.NODE_ENV == 'production'){ app.use(morgan('combined')); }else app.use(morgan('dev'))}
if(process.env.NODE_ENV == 'production'){ sessionOption.proxy = true; }
시퀄라이즈도 배포 환경으로 바꾼다 .env에 패스워드 호스트 username을 넣고 여기에서 가져다 쓴다
package.json 의 스크립트 부분에 서버 실행을 위한 npm스크립트를 두개로 나눈다


sanitize-html , csurf 패키지를 사용한다
해당 패키지는 각각 XSS, CSRF공격을 막기 위한 패키지이다 
ex) npm i sanitize-html  csurf 


pm2 패키지는 원활한 서버 운영을 위한 패키지이다 
가장 큰 기능은 서버가 에러로 인해 꺼졌을 떄 다시 켜주는 기능을 한다
또 하나의 중요한 기능은 멀티 프로세싱이다 하나의 프로세스로 오는 부하가 적어져 원할하게 운영된다
단점은 멀티 스레딩이 아니여서 서버 메모리 자원을 공유하지는 못한다 세션을 메모리에 저장했는데 메모리를
공유하지 못해서 프로세스 간 세션이 공유되지 않게된다 이를 해결하기 위해 맴캐시드나 레디스 같은
서비스를 사용하면 된다 
ex) npm i pm2
pm2는 nodemon처럼 콘솔에 입력한다


winston 패키지를 사용하면 로그를 관리하기 좋다 '

helmet과 hpp패키지를 사용하면 서버의 각종 취약점을 보완해준다 이 패키지를 사용한다고
모든 취약점을 방어해주는건 아니여서 주기적으로 취약점을 점검해야 한다 

connect-redis  멀티 프로세스간 세션 공유를 위해 레디스와 익스프레스를 연결해주는 패키지다 
서버가 종료되어 메모리가 날라가면 접속이 모두 풀리는데 이를 해결하기 위해 데이터를 데이터베이스에
저장하는데 이때 사용하는 데이터베이스가 레디스이다 

nvm, n은 노드 버전을 업데이트 하기 위한 패키지이다 

 
깃허브는 깃으로부터 업로드한 소스 코드를 서버에 저장할 수 있는 원격 저장소이다
깃허브에 소스코드를 업로드하면 여러 사람이 코드를 공동 관리할 수 있다 
깃에 소스를 업로드 하려면 다음과 같이 하면된다

프로젝트 폴더에 들어가서 git init (현재 디렉터리를 깃 관리 대상으로 지정) 
git add .(모든  파일과 디렉터리를 깃 관리 대상에 추가 )
git config 명령으로 사용자 이메일과 이름을 등록한다 
ex) git config --global user.email "awardfact@hanmai;.net"  
git config --global user.name "sangJin"
그 뒤에 커밋을 한다 
ex) git commit -m "메시지" 
그다음에 깃에 깃허브 주소를 등록해야 한다 git remote add 별명 주소 명령을 사용한다 
별명은 origin 주소는  https://아이디:비밀번호@github.com/아이디/저장소명으로 하면된다
마지막으로 깃허브에 업로드할때는 
git push 별명 브랜치 명령을 사용한다 브랜치는master로 사용하면 된다 

